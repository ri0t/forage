#!/usr/bin/env python3

# !/usr/bin/env python3
# -*- coding: UTF-8 -*-

# Forage
# ======
# Copyright (C) 2018 riot <riot@c-base.org> and others.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

Forage Tool
===========

A simple tool to execute commands on given folders.
Via spur, forage is capable of doing that over ssh, too.

"""

__author__ = "Heiko 'riot' Weinen"
__license__ = "AGPLv3"

import os
import spur
import click
import sys

QUIET = False


def log(*what, ignore_quiet=False):
    """Very simple logging"""

    if QUIET and not ignore_quiet:
        return

    result = ""
    for item in what:
        result += str(item) + " "

    print(result.rstrip(" "))


def run_process(cwd, args, shell=None):
    """Execute an external process via Spur"""

    log("Running:", cwd, args)

    if shell is None:
        log('Running on local shell')
        shell = spur.LocalShell()
    else:
        log('Running on remote shell:', shell)

    try:
        process = shell.run(args, cwd=cwd)

        return True, process
    except spur.RunProcessError as e:
        log('Uh oh, the teapot broke again! Error:', e, type(e))
        log(e.args, e.return_code, e.output)
        return False, e
    except spur.NoSuchCommandError as e:
        log('Command was not found:', e, type(e))
        log(args)
        return False, e


@click.command()
@click.option('--stop', '-s', is_flag=True, default=False, help='Stop immediately upon return code != 0')
@click.option('--confirm', '-c', is_flag=True, default=False, help='Confirm call for each element')
@click.option('--dry', '-d', is_flag=True, default=False, help='Do a dry run')
@click.option('--change-dir', default=None, help='Change to another directory before execution')
@click.option('--output', '-o', is_flag=True, default=False, help='Log command output')
@click.option('--pure', '-p', is_flag=True, default=False, help='Log command output with original formatting')
@click.option('--header', '-h', is_flag=True, default=False, help='Log a header for each command')
@click.option('--quiet', '-q', is_flag=True, default=False, help='Suppress forage debug output')
@click.option('--recurse', '-r', is_flag=True, default=False, help='Recurse given subdirectory')
@click.option('--recurse-level', '-rl', type=int, default=1, help='Recursion depth')
@click.option('--cmd-replace', type=str, default="")
@click.argument('command')
@click.argument('elements', nargs=-1)
def forage(stop, confirm, dry, change_dir, output, pure, header, quiet,
            recurse, recurse_level, cmd_replace, command, elements):
    """Execute a command on each given folder"""

    global QUIET
    QUIET = quiet

    if len(elements) == 0:
        log('No target elements given: bye.')
        return

    if recurse:
        if len(elements) > 1:
            log('Will only operate on the first element. You gave multiple!')

        target = elements[0]
        elements = []

        for root, dirs, files in os.walk(target):
            if root[len(target) + 1:].count(os.sep) < recurse_level:
                elements.append(os.path.join(root))

        log(elements)

    command = command.lstrip("'").rstrip("'")

    for item in elements:
        if header:
            log('===== %s =====' % item, ignore_quiet=True)
        command_list = command.replace('{{folder}}', item).split(' ')
        replaced_command_list = []
        for command_item in command_list:
            replaced_command_list.append(command_item.replace('{{replace}}', cmd_replace))
        if change_dir is not None:
            cwd = change_dir
        else:
            cwd = os.path.join(os.path.curdir, item)
        cwd = os.path.realpath(cwd)

        log('Would now run', replaced_command_list, 'on', item, 'in', cwd)
        if confirm and not input('Confirm? (y/N) ').upper() == 'Y':
            log('STOPPED FOREACH')
            sys.exit()

        if not dry:
            success, result = run_process(cwd, replaced_command_list)
            if not success:
                log(result)
            elif output:
                if pure:
                    stuff = result.output.decode('ascii')
                else:
                    stuff = result.output
                log(stuff, ignore_quiet=True)
            if stop:
                log('STOPPED FOREACH')
                sys.exit()


def main():
    """Run the foreach program."""

    forage()


if __name__ == '__main__':
    main()
